
test_qemu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  4 .ARM          00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103e0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000177  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000d6  00000000  00000000  00010587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  000106d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f46  00000000  00000000  00010738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004cd  00000000  00000000  0001167e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003b91  00000000  00000000  00011b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000156dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000124  00000000  00000000  0001572c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003c0 	.word	0x080003c0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003c0 	.word	0x080003c0

080001e8 <init_leds>:
#define RCC_AHB1ENR *((uint32_t *)0x40023830)
#define GPIOD_MODER *((uint32_t *)0x40020c00)
#define GPIOD_ODR   *((uint32_t *)0x40020c14)

void init_leds()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= 1<< 3;
 80001ec:	4b0b      	ldr	r3, [pc, #44]	; (800021c <init_leds+0x34>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <init_leds+0x34>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= 1<<24;
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <init_leds+0x38>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <init_leds+0x38>)
 80001fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= 1<<28;
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <init_leds+0x38>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a05      	ldr	r2, [pc, #20]	; (8000220 <init_leds+0x38>)
 800020a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800020e:	6013      	str	r3, [r2, #0]

}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40023830 	.word	0x40023830
 8000220:	40020c00 	.word	0x40020c00

08000224 <turn_green_on>:

void turn_green_on()
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	GPIOD_ODR   |= 1<<12;
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <turn_green_on+0x1c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <turn_green_on+0x1c>)
 800022e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40020c14 	.word	0x40020c14

08000244 <turn_red_on>:


void turn_red_on()
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	GPIOD_ODR   |= 1<<14;
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <turn_red_on+0x1c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <turn_red_on+0x1c>)
 800024e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000252:	6013      	str	r3, [r2, #0]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40020c14 	.word	0x40020c14

08000264 <turn_green_off>:


void turn_green_off()
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	GPIOD_ODR   &= ~(1<<12);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <turn_green_off+0x1c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <turn_green_off+0x1c>)
 800026e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40020c14 	.word	0x40020c14

08000284 <turn_red_off>:

void turn_red_off()
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	GPIOD_ODR   &= ~(1<<14);
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <turn_red_off+0x1c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <turn_red_off+0x1c>)
 800028e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40020c14 	.word	0x40020c14

080002a4 <delay>:

void delay(uint32_t time)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	while(time--);
 80002ac:	bf00      	nop
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	1e5a      	subs	r2, r3, #1
 80002b2:	607a      	str	r2, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1fa      	bne.n	80002ae <delay+0xa>
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <main>:

int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0

	init_leds();
 80002ce:	f7ff ff8b 	bl	80001e8 <init_leds>

	for(int i=0; i < 10; i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	e00c      	b.n	80002f2 <main+0x2a>
	{
		turn_green_on();
 80002d8:	f7ff ffa4 	bl	8000224 <turn_green_on>
		delay(40000000);
 80002dc:	4810      	ldr	r0, [pc, #64]	; (8000320 <main+0x58>)
 80002de:	f7ff ffe1 	bl	80002a4 <delay>
		turn_green_off();
 80002e2:	f7ff ffbf 	bl	8000264 <turn_green_off>
		delay(40000000);
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <main+0x58>)
 80002e8:	f7ff ffdc 	bl	80002a4 <delay>
	for(int i=0; i < 10; i++)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b09      	cmp	r3, #9
 80002f6:	ddef      	ble.n	80002d8 <main+0x10>

	}


	for(int j=0; j < 4; j++)
 80002f8:	2300      	movs	r3, #0
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	e00c      	b.n	8000318 <main+0x50>
	{
		turn_red_on();
 80002fe:	f7ff ffa1 	bl	8000244 <turn_red_on>
		delay(40000000);
 8000302:	4807      	ldr	r0, [pc, #28]	; (8000320 <main+0x58>)
 8000304:	f7ff ffce 	bl	80002a4 <delay>
		turn_red_off();
 8000308:	f7ff ffbc 	bl	8000284 <turn_red_off>
		delay(40000000);
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <main+0x58>)
 800030e:	f7ff ffc9 	bl	80002a4 <delay>
	for(int j=0; j < 4; j++)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b03      	cmp	r3, #3
 800031c:	ddef      	ble.n	80002fe <main+0x36>
	}



	/* Loop forever */
	for(;;);
 800031e:	e7fe      	b.n	800031e <main+0x56>
 8000320:	02625a00 	.word	0x02625a00

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ffb7 	bl	80002c8 <main>

0800035a <LoopForever>:

LoopForever:
    b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	2000001c 	.word	0x2000001c

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	; (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	; (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	; (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	; (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
